%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(r) 6.0
%%For: (Frank Waelbroeck) (IFS)
%%Title: (pinchpart.eps)
%%CreationDate: (2/22/97) (11:58 AM)
%%BoundingBox: 16 8 295 206
%%HiResBoundingBox: 16.7238 8.8957 294.2328 205.664
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.0
%AI3_ColorUsage: Black&White
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()
%AI3_TemplateBox: 0 0 0 0
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 0 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -32 256 1.5 634 437 18 0 1 3 40
%AI5_OpenViewLayers: 7
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 23 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 13 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 17 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
	
	/initialize
	{ 
		Adobe_ColorImage_AI6 begin
		Adobe_ColorImage_AI6
		{
			dup type /arraytype eq
			{
				dup xcheck
				{
					bind
				} if
			} if
			pop pop
		} forall
	} def
	/terminate { end } def
	
	currentdict /Adobe_ColorImage_AI6_Vars known not
	{
		/Adobe_ColorImage_AI6_Vars 14 dict def
	} if
	
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 0 def
		/sourcecount 0 def
		/sourcearray 4 array def
		/plateindex -1 def
		/XIMask 0 def
		/XIBinary 0 def
		/XIChannelCount 0 def
		/XIBitsPerPixel 0 def
		/XIImageHeight 0 def
		/XIImageWidth 0 def
		/XIImageMatrix null def
		/XIBuffer null def
		/XIDataProc null def
 end
	
	/WalkRGBString null def
	/WalkCMYKString null def
	
	/StuffRGBIntoGrayString null def
	/RGBToGrayImageProc null def
	/StuffCMYKIntoGrayString null def
	/CMYKToGrayImageProc null def
	/ColorImageCompositeEmulator null def
	
	/SeparateCMYKImageProc null def
	
	/FourEqual null def
	/TestPlateIndex null def
	
	currentdict /_colorimage known not
	{
		/colorimage where
		{
			/colorimage get /_colorimage exch def
		}
		{
			/_colorimage null def
		} ifelse
	} if
	
	/_currenttransfer systemdict /currenttransfer get def
	
	/colorimage null def
	/XI null def
	
	
	/WalkRGBString
	{
		0 3 index
	
		dup length 1 sub 0 3 3 -1 roll
		{
			3 getinterval { } forall
	
			5 index exec
	
			3 index
		} for
		
		 5 { pop } repeat
	
	} def
	
	
	/WalkCMYKString
	{
		0 3 index
	
		dup length 1 sub 0 4 3 -1 roll
		{
			4 getinterval { } forall
			
			6 index exec
			
			3 index
			
		} for
		
		5 { pop } repeat
		
	} def
	
	
	/StuffRGBIntoGrayString
	{
		.11 mul exch
		
		.59 mul add exch
		
		.3 mul add
		
		cvi 3 copy put
		
		pop 1 add
	} def
	
	
	/RGBToGrayImageProc
	{	
		Adobe_ColorImage_AI6_Vars begin 
			sourcearray 0 get exec
			dup length 3 idiv string
			dup 3 1 roll 
			
			/StuffRGBIntoGrayString load exch
			WalkRGBString
	 end
	} def
	
	
	/StuffCMYKIntoGrayString
	{
		exch .11 mul add
		
		exch .59 mul add
		
		exch .3 mul add
		
		dup 255 gt { pop 255 } if
		
		255 exch sub cvi 3 copy put
		
		pop 1 add
	} def
	
	
	/CMYKToGrayImageProc
	{	
		Adobe_ColorImage_AI6_Vars begin
			sourcearray 0 get exec
			dup length 4 idiv string
			dup 3 1 roll 
			
			/StuffCMYKIntoGrayString load exch
			WalkCMYKString
	 end
	} def
	
	
	/ColorImageCompositeEmulator
	{
		pop true eq
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
		}
		{
			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
			{
				Adobe_ColorImage_AI6_Vars begin
					sourcearray 0 3 -1 roll put
				
					channelcount 3 eq 
					{ 
						/RGBToGrayImageProc 
					}
					{ 
						/CMYKToGrayImageProc
					} ifelse
					load
			 end
			} if
			image
		} ifelse
	} def
	
	
	/SeparateCMYKImageProc
	{	
		Adobe_ColorImage_AI6_Vars begin
	
			sourcecount 0 ne
			{
				sourcearray plateindex get exec
			}
			{			
				sourcearray 0 get exec
				
				dup length 4 idiv string
				
				0 2 index
				
				plateindex 4 2 index length 1 sub
				{
					get 255 exch sub
					
					3 copy put pop 1 add
					
					2 index
				} for
	
				pop pop exch pop
			} ifelse
	 end
	} def
		
	
	/FourEqual
	{
		4 index ne
		{
			pop pop pop false
		}
		{
			4 index ne
			{
				pop pop false
			}
			{
				4 index ne
				{
					pop false
				}
				{
					4 index eq
				} ifelse
			} ifelse
		} ifelse
	} def
	
	
	/TestPlateIndex
	{
		Adobe_ColorImage_AI6_Vars begin
			/plateindex -1 def
	
			/setcmykcolor where
			{
				pop
				gsave
				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
				grestore
	
				1 0 0 0 FourEqual 
				{ 
					/plateindex 0 def
				}
				{
					0 1 0 0 FourEqual
					{ 
						/plateindex 1 def
					}
					{
						0 0 1 0 FourEqual
						{
							/plateindex 2 def
						}
						{
							0 0 0 1 FourEqual
							{ 
								/plateindex 3 def
							}
							{
								0 0 0 0 FourEqual
								{
									/plateindex 5 def
								} if
							} ifelse
						} ifelse
					} ifelse
				} ifelse
				pop pop pop pop
			} if
			plateindex
	 end
	} def
	
	
	/colorimage
	{
		Adobe_ColorImage_AI6_Vars begin
			/channelcount 1 index def
			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
	
			4 sourcecount add index dup 
			8 eq exch 1 eq or not
	 end
		
		{
			/_colorimage load null ne
			{
				_colorimage
			}
			{
				Adobe_ColorImage_AI6_Vars /sourcecount get
				7 add { pop } repeat
			} ifelse
		}
		{
			dup 3 eq
			TestPlateIndex
			dup -1 eq exch 5 eq or or
			{
				/_colorimage load null eq
				{
					ColorImageCompositeEmulator
				}
				{
					dup 1 eq
					{
						pop pop image
					}
					{
						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
						{
							gsave
							
							0 _currenttransfer exec
							1 _currenttransfer exec
							eq
							{ 0 _currenttransfer exec 0.5 lt }
							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
							
							{ { pop 0 } } { { pop 1 } } ifelse
							systemdict /settransfer get exec
						} if
						
						_colorimage
						
						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
						{
							grestore
						} if
					} ifelse
				} ifelse
			}
			{
				dup 1 eq
				{
					pop pop
					image
				}
				{
					pop pop
	
					Adobe_ColorImage_AI6_Vars begin
						sourcecount -1 0
						{			
							exch sourcearray 3 1 roll put
						} for
	
						/SeparateCMYKImageProc load
				 end
	
					systemdict /image get exec
				} ifelse
			} ifelse
		} ifelse
	} def
	
	/XI
	{
		Adobe_ColorImage_AI6_Vars begin
			gsave
			/XIMask exch 0 ne def
			/XIBinary exch 0 ne def
			pop
			pop
			/XIChannelCount exch def
			/XIBitsPerPixel exch def
			/XIImageHeight exch def
			/XIImageWidth exch def
			pop pop pop pop
			/XIImageMatrix exch def
			
			XIBitsPerPixel 1 eq
			{
				XIImageWidth 8 div ceiling cvi
			}
			{
				XIImageWidth XIChannelCount mul
			} ifelse
			/XIBuffer exch string def
			
			XIBinary
			{
				/XIDataProc { currentfile XIBuffer readstring pop } def
				currentfile 128 string readline pop pop
			}
			{
				/XIDataProc { currentfile XIBuffer readhexstring pop } def
			} ifelse
			
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			
			XIMask
			{
				XIImageWidth XIImageHeight
				false
				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
				/XIDataProc load
				
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
				
				imagemask
			}
			{
				XIImageWidth XIImageHeight
				XIBitsPerPixel
				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
				/XIDataProc load
				
				XIChannelCount 1 eq
				{
					
					gsave
					0 setgray
					
					image
					
					grestore
				}
				{
					false
					XIChannelCount
					colorimage
				} ifelse
			} ifelse
			grestore
	 end
	} def
	
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
1 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Green & Blue)
(Green & Blue) 0 2 Bd
[
<
99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9
A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9
B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9
C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9
D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9
E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9
F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF
>
<
000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D
1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B
3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F5050515253535455565657585959
5A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F7071717273747475767777
78797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F9091919293949495
96979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3
B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
[
1 0.75 0 0 1 50 100 %_Bs
0.6 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Pink, Yellow, Green)
(Pink, Yellow, Green) 0 3 Bd
[
<
00000000000000000000000000000000000000010101010101010101010101010101010101010101
01010101010202020202020202020202020202020202020202020203030303030303030303030303
03030303030303030404040404040404040404040404040404040404050505050505050505050505
05050505050505060606060606060606060606060606060606060707070707070707070707070707
07070707080808080808080808080808080808080809090909090909090909090909090909090A0A
0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C
0C0C0C0C0C0C0C0D0D0D0D0D
>
<
050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141415151617
17181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F
2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A
4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F6061626363646566666768
69696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F80818283838485868787
88898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8
A9AAABACADADAEAFB0B1B2B2
>
<
CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7
B7B6B6B5B4B4B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B
9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B
7A7978777776757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A5958
5756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A3938383736353433
3231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C
0B0A09080706050403020100
>
0
1 %_Br
<
737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E
4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D
2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A1918181717161615141413
1312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202
020201010101010000000000
>
<
00000000000000000000000001010101010101010101010101010101010101010101010102020202
02020202020202020202020202020202020202020202030303030303030303030303030303030303
03030303030303030303030303040404040404040404040404040404040404040404040404040404
04040404040404040404050505050505050505050505050505050505050505050505050505050505
050505050505050505050505
>
<
BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3
C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7
C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACA
CACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCC
>
0
1 %_Br
[
0.05 0.7 0 0 1 50 100 %_Bs
0 0.02 0.8 0 1 57 36 %_Bs
0.45 0 0.75 0 1 37 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple, Red & Yellow)
(Purple, Red & Yellow) 0 3 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A
>
<
CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4
D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDC
DDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5
E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDED
EDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFE
FEFEFEFFFFFF
>
0
1 %_Br
<
E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBE
BDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E
6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746
4544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E
1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEA
EAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEE
EEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3
F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7
F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFC
FCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF
>
<
00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223
242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F4041424344454546
4748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A
6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E
8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1
B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC
>
0
1 %_Br
[
0 0.04 1 0 1 50 100 %_Bs
0 1 0.8 0 1 50 50 %_Bs
0.9 0.9 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060606070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_Bs
1 1 0 0 1 50 80 %_Bs
1 0.0279 0 0 1 50 60 %_Bs
1 0 1 0 1 50 40 %_Bs
0 0 1 0 1 50 20 %_Bs
0 1 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Steel Bar)
(Steel Bar) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 70 %_Bs
0 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_Bs
0 0.55 0.9 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Purple Radial)
(Yellow & Purple Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 8 Pb
Pn
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Pink, Yellow, Green) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Purple Radial) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
Bb
2 (Rainbow) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
Bb
2 (Steel Bar) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
Bb
2 (Purple, Red & Yellow) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
Bb
2 (Green & Blue) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) -4320 4320 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
0 R
0 0 0 1 K
800 Ar
1 J 1 j 0.0417 w 4 M []0 d
%AI3_Note:
0 D
0 XR
189.6275 126.6978 m
189.6275 126.966 L
189.6249 127.2109 L
189.6197 127.4895 L
189.6093 127.7551 L
189.5911 128.2213 L
189.5624 128.7213 L
189.5182 129.263 L
189.4635 129.8307 L
189.3385 130.7994 L
189.1719 131.7369 L
188.9869 132.5364 L
188.7551 133.3125 L
188.4765 134.0182 L
188.1719 134.5702 L
187.9869 134.8124 L
187.8124 134.9921 L
187.7265 135.0625 L
187.6458 135.1172 L
187.5676 135.1614 L
187.4895 135.1953 L
187.4453 135.2083 L
187.401 135.2213 L
187.3177 135.2343 L
187.2734 135.2395 L
187.2213 135.2395 L
187.1771 135.2369 L
187.1328 135.2317 L
187.0547 135.2135 L
187.013 135.2005 L
186.9687 135.1849 L
186.8176 135.1067 L
186.7317 135.0495 L
186.6406 134.9713 L
186.4791 134.8072 L
186.1719 134.3672 L
185.9062 133.8411 L
185.6562 133.1953 L
185.414 132.3906 L
185.2161 131.5364 L
185.0599 130.6926 L
184.9114 129.6327 L
184.8437 129.0104 L
184.7942 128.4218 L
184.7577 127.9036 L
184.7291 127.3281 L
184.7213 127.0338 L
184.7161 126.8723 L
184.7135 126.7213 L
184.7082 126.427 L
S
184.7082 126.427 m
184.703 126.1562 L
184.7082 125.8723 L
184.7082 125.7109 L
184.7109 125.5677 L
184.7161 125.3021 L
184.7213 125.0208 L
184.7317 124.7707 L
184.7421 124.539 L
184.7734 124.0208 L
184.815 123.4713 L
184.8593 122.9843 L
184.9973 121.9478 L
185.1432 121.1354 L
185.3281 120.3437 L
185.526 119.7005 L
185.7291 119.2005 L
185.9608 118.7707 L
186.0989 118.5833 L
186.2265 118.4479 L
186.3385 118.3541 L
186.4062 118.3151 L
186.4687 118.2838 L
186.5312 118.2578 L
186.5911 118.2422 L
186.6588 118.2369 L
186.7213 118.2369 L
186.789 118.2448 L
186.8593 118.2656 L
186.8957 118.2812 L
186.9348 118.2968 L
187.0052 118.3385 L
187.138 118.4453 L
187.2578 118.5729 L
187.3958 118.7603 L
187.5364 119.0078 L
187.7838 119.5781 L
187.9895 120.2291 L
188.1588 120.94 L
188.3151 121.8176 L
188.3906 122.3541 L
188.4479 122.8645 L
188.4921 123.3489 L
188.5286 123.8827 L
188.5468 124.1953 L
188.5572 124.4869 L
188.5624 124.6249 L
188.5702 124.7786 L
188.5755 125.0573 L
188.5781 125.3489 L
188.5807 125.513 L
S
188.5807 125.513 m
188.5807 125.6692 L
188.5781 125.8332 L
188.5781 125.9843 L
188.5755 126.1588 L
188.5729 126.3229 L
188.5624 126.6171 L
188.552 126.8905 L
188.5208 127.5078 L
188.4791 128.1067 L
188.427 128.6536 L
188.276 129.8567 L
188.1067 130.8645 L
187.8827 131.8541 L
187.4166 133.3463 L
187.1094 134.0364 L
186.802 134.5624 L
186.4557 134.9921 L
186.2526 135.1719 L
186.1536 135.2395 L
186.0599 135.2968 L
185.9739 135.3385 L
185.8931 135.3698 L
185.802 135.3958 L
185.7057 135.4166 L
185.6171 135.4244 L
185.5208 135.4244 L
185.4713 135.4192 L
185.4218 135.4114 L
185.3281 135.3906 L
185.2343 135.3619 L
185.1484 135.3255 L
184.9556 135.2135 L
184.7864 135.0833 L
184.6119 134.914 L
184.3177 134.5338 L
184.0078 134.0104 L
183.6796 133.2916 L
183.3958 132.4947 L
182.9504 130.7551 L
182.7525 129.6718 L
182.6067 128.6223 L
182.5416 128.0156 L
182.4921 127.4401 L
182.4687 127.1198 L
182.4453 126.776 L
182.4296 126.4609 L
182.4166 126.1719 L
182.4088 125.8983 L
182.4036 125.6406 L
182.3984 125.3672 L
S
182.3984 125.3672 m
182.3984 125.2135 L
182.3984 125.0755 L
182.3984 124.8411 L
182.401 124.5859 L
182.4062 124.3229 L
182.4114 124.0781 L
182.4218 123.7942 L
182.4348 123.5312 L
182.4661 123.0417 L
182.5104 122.5338 L
182.5676 122.0052 L
182.7057 121.0937 L
182.7968 120.6353 L
182.8879 120.2526 L
183.0859 119.6119 L
183.1875 119.3489 L
183.2916 119.1354 L
183.3984 118.9504 L
183.5 118.815 L
183.6145 118.6926 L
183.6796 118.6432 L
183.7395 118.6041 L
183.7994 118.5781 L
183.8619 118.5598 L
183.9192 118.552 L
183.9791 118.552 L
184.0104 118.5598 L
184.0417 118.565 L
184.0755 118.5755 L
184.1094 118.5911 L
184.1692 118.6223 L
184.2343 118.664 L
184.3489 118.7707 L
184.4479 118.901 L
184.5572 119.0677 L
184.6666 119.2864 L
184.8541 119.7681 L
185.013 120.3229 L
185.1719 121.0599 L
185.289 121.8411 L
185.3463 122.3255 L
185.3906 122.7916 L
185.4088 123.0521 L
185.4296 123.3463 L
185.4427 123.6067 L
185.4557 123.8931 L
185.4609 124.0547 L
185.4635 124.2005 L
185.4661 124.3385 L
185.4687 124.4921 L
S
185.4687 124.4921 m
185.4713 124.7577 L
185.4713 125.0469 L
185.4687 125.2083 L
185.4687 125.3593 L
185.4661 125.5338 L
185.4609 125.7005 L
185.4531 125.9921 L
185.4375 126.3177 L
185.4036 126.901 L
185.3567 127.5234 L
185.2369 128.6354 L
185.0729 129.7317 L
184.8931 130.6978 L
184.6562 131.6822 L
184.3567 132.6744 L
183.7682 134.0963 L
183.4088 134.7161 L
183.0547 135.1797 L
182.8567 135.388 L
182.638 135.5676 L
182.526 135.6432 L
182.401 135.7187 L
182.2838 135.7734 L
182.1745 135.815 L
182.0651 135.8463 L
181.9635 135.8697 L
181.8515 135.8801 L
181.789 135.8827 L
181.7317 135.8827 L
181.6354 135.8775 L
181.5312 135.8619 L
181.4218 135.8385 L
181.3177 135.802 L
181.1224 135.7187 L
180.9192 135.5937 L
180.5598 135.289 L
180.1875 134.8463 L
179.7968 134.2369 L
179.4192 133.4661 L
179.0885 132.6249 L
178.5676 130.8254 L
178.3333 129.7187 L
178.1588 128.6614 L
178.013 127.4765 L
177.9582 126.8775 L
177.9114 126.2239 L
177.8827 125.6744 L
177.8723 125.3672 L
177.8671 125.0859 L
177.8619 124.8176 L
S
177.8619 124.8176 m
177.8619 124.5781 L
177.8619 124.3047 L
177.8645 124.0469 L
177.8697 123.8202 L
177.8775 123.5807 L
177.8853 123.3828 L
177.8983 123.1666 L
177.9296 122.6978 L
177.966 122.2812 L
178.0208 121.8202 L
178.0807 121.414 L
178.2135 120.7291 L
178.2994 120.3958 L
178.3854 120.1198 L
178.4921 119.8359 L
178.5937 119.6171 L
178.6848 119.4661 L
178.7864 119.3411 L
178.8853 119.2474 L
178.9452 119.2109 L
179 119.1849 L
179.0495 119.1692 L
179.0989 119.1614 L
179.1406 119.164 L
179.1901 119.1692 L
179.2395 119.1875 L
179.2942 119.2135 L
179.3411 119.2448 L
179.3906 119.2838 L
179.5052 119.4088 L
179.6041 119.5598 L
179.7187 119.776 L
179.8202 120.026 L
179.9895 120.565 L
180.0729 120.9192 L
180.1484 121.2812 L
180.2708 122.1042 L
180.3229 122.6171 L
180.3645 123.1146 L
180.3906 123.5702 L
180.401 123.8385 L
180.4088 124.0911 L
180.414 124.3619 L
180.414 124.6119 L
180.414 124.7499 L
180.414 124.9036 L
180.4114 125.1849 L
180.4062 125.4401 L
180.401 125.6796 L
180.3906 125.9452 L
S
180.3906 125.9452 m
180.375 126.2343 L
180.3385 126.828 L
180.2916 127.375 L
180.1745 128.4348 L
180.026 129.4348 L
179.8098 130.5572 L
179.5729 131.539 L
179.2812 132.539 L
178.9166 133.5312 L
178.5442 134.3515 L
178.1719 135.013 L
177.789 135.5468 L
177.3724 136.0078 L
177.1302 136.2109 L
176.8983 136.3698 L
176.69 136.4817 L
176.4557 136.5729 L
176.3359 136.6067 L
176.2682 136.6249 L
176.2031 136.6354 L
176.138 136.6458 L
176.0625 136.6536 L
175.9322 136.6588 L
175.8176 136.6536 L
175.6952 136.6432 L
175.565 136.6171 L
175.4453 136.5859 L
175.3333 136.5494 L
175.2109 136.5 L
174.9895 136.3854 L
174.5781 136.0963 L
174.1146 135.6301 L
173.7057 135.0859 L
173.3073 134.4244 L
172.9114 133.6041 L
172.289 131.8957 L
171.9765 130.7473 L
171.7291 129.6015 L
171.552 128.5572 L
171.4036 127.4088 L
171.3541 126.8463 L
171.3281 126.5546 L
171.3073 126.2474 L
171.2942 125.9791 L
171.2786 125.69 L
171.2708 125.427 L
171.2656 125.1875 L
171.2604 124.94 L
171.2604 124.7083 L
171.2604 124.5025 L
S
171.2604 124.5025 m
171.263 124.2838 L
171.2708 124.0469 L
171.2786 123.8072 L
171.289 123.6015 L
171.302 123.3828 L
171.3385 122.914 L
171.3854 122.5052 L
171.4427 122.0937 L
171.5156 121.6926 L
171.6588 121.112 L
171.7499 120.8385 L
171.8437 120.6223 L
171.9426 120.4349 L
172.0364 120.3021 L
172.0937 120.2396 L
172.1432 120.1901 L
172.2005 120.1536 L
172.2292 120.138 L
172.2604 120.1224 L
172.3151 120.1094 L
172.3463 120.1042 L
172.375 120.1042 L
172.4244 120.1094 L
172.4791 120.1224 L
172.5364 120.1484 L
172.5859 120.1797 L
172.6822 120.2656 L
172.7734 120.3802 L
172.8697 120.5364 L
173.0312 120.8931 L
173.1172 121.138 L
173.1901 121.3932 L
173.2734 121.7265 L
173.3411 122.0677 L
173.4036 122.4296 L
173.4609 122.8619 L
173.5104 123.3229 L
173.5312 123.5911 L
173.5494 123.8411 L
173.5624 124.0677 L
173.5755 124.3203 L
173.5781 124.4609 L
173.5833 124.5937 L
173.5885 124.8567 L
173.5911 125.1094 L
173.5911 125.3411 L
173.5885 125.6145 L
173.5833 125.8775 L
173.5755 126.112 L
173.5624 126.375 L
S
173.5624 126.375 m
173.5338 126.9088 L
173.4947 127.4114 L
173.4531 127.8879 L
173.3177 128.9687 L
173.1276 130.125 L
172.8697 131.3255 L
172.5833 132.3984 L
172.2187 133.4843 L
171.7603 134.5833 L
171.3489 135.3776 L
170.8671 136.1224 L
170.3229 136.7682 L
170.0677 137.013 L
169.7864 137.2369 L
169.5026 137.4218 L
169.2369 137.5546 L
169.1094 137.6093 L
168.9713 137.6588 L
168.8385 137.6952 L
168.7135 137.7239 L
168.5729 137.7447 L
168.4947 137.7551 L
168.4114 137.7603 L
168.3281 137.7629 L
168.2448 137.7629 L
168.1719 137.7603 L
168.0911 137.7551 L
167.9452 137.7369 L
167.8671 137.7239 L
167.7916 137.7057 L
167.5156 137.6249 L
167.3672 137.5676 L
167.2083 137.4921 L
166.927 137.3333 L
166.3099 136.8411 L
165.802 136.2812 L
165.2734 135.5338 L
164.7916 134.6744 L
164.3802 133.7655 L
163.7265 131.8775 L
163.4348 130.7499 L
163.2161 129.6848 L
163.0339 128.5156 L
162.966 127.9322 L
162.9062 127.2994 L
162.8723 126.802 L
162.8567 126.5234 L
162.8489 126.2682 L
162.8411 126.0052 L
162.8385 125.7655 L
S
162.8385 125.7655 m
162.8359 125.638 L
162.8359 125.4973 L
162.8385 125.25 L
162.8437 125.0417 L
162.8515 124.815 L
162.8645 124.5885 L
162.8749 124.3776 L
162.9062 124.0208 L
162.9452 123.6536 L
163.0026 123.2552 L
163.0807 122.8593 L
163.1588 122.526 L
163.2422 122.25 L
163.4192 121.8254 L
163.5156 121.6614 L
163.5755 121.5833 L
163.6275 121.5208 L
163.6796 121.4713 L
163.7291 121.4322 L
163.7812 121.401 L
163.8124 121.3828 L
163.8411 121.375 L
163.8957 121.3567 L
163.927 121.3541 L
163.9582 121.3541 L
164.013 121.3593 L
164.0729 121.375 L
164.1276 121.401 L
164.1745 121.4296 L
164.2864 121.5234 L
164.3854 121.638 L
164.4765 121.7812 L
164.5807 121.9765 L
164.6848 122.2239 L
164.8567 122.7707 L
164.9504 123.164 L
165.0286 123.5702 L
165.0911 124 L
165.1406 124.427 L
165.1797 124.8332 L
165.1927 125.0495 L
165.2083 125.2916 L
165.2135 125.4296 L
165.2187 125.5572 L
165.2265 125.8202 L
165.2292 126.0625 L
165.2292 126.3229 L
165.2292 126.5781 L
165.2239 126.8619 L
165.2161 127.1302 L
S
165.2161 127.1302 m
165.2083 127.3776 L
165.1692 127.9712 L
165.1484 128.2682 L
165.1172 128.6015 L
164.9869 129.6718 L
164.7968 130.8254 L
164.5676 131.9062 L
164.3125 132.8645 L
163.9687 133.9218 L
163.5546 134.9791 L
162.677 136.6406 L
162.125 137.4062 L
161.5729 138.0104 L
160.9374 138.5312 L
160.5676 138.7525 L
160.2265 138.9114 L
160.0625 138.9739 L
159.9035 139.0234 L
159.7603 139.0599 L
159.6093 139.0911 L
159.4427 139.1146 L
159.2916 139.1276 L
159.125 139.1302 L
159.0312 139.1302 L
158.9452 139.125 L
158.789 139.1146 L
158.6432 139.0911 L
158.5078 139.0651 L
158.3672 139.0312 L
158.0495 138.9296 L
157.7577 138.802 L
157.1562 138.4348 L
156.513 137.8879 L
155.8801 137.1667 L
155.3255 136.3593 L
154.8411 135.4895 L
154.3645 134.4505 L
153.9947 133.4687 L
153.6588 132.3724 L
153.3854 131.2656 L
153.1927 130.2578 L
153.1198 129.7734 L
153.0495 129.2526 L
152.9973 128.7655 L
152.9608 128.3281 L
152.9426 128.0937 L
152.9296 127.8385 L
152.9192 127.5755 L
152.9114 127.3281 L
152.9088 127.0989 L
S
152.9088 127.0989 m
152.9088 126.8619 L
152.9114 126.6614 L
152.914 126.4479 L
152.9192 126.3255 L
152.927 126.2005 L
152.9374 125.9817 L
152.953 125.7499 L
152.9765 125.5052 L
153.026 125.0859 L
153.0833 124.7239 L
153.1588 124.3489 L
153.2448 124.0286 L
153.4244 123.5182 L
153.5364 123.289 L
153.6484 123.1146 L
153.776 122.9634 L
153.8411 122.9062 L
153.9166 122.8541 L
153.9791 122.8228 L
154.0391 122.7994 L
154.1067 122.789 L
154.1432 122.7864 L
154.1745 122.7864 L
154.2369 122.7916 L
154.2734 122.7994 L
154.3047 122.8072 L
154.3645 122.8332 L
154.4244 122.8671 L
154.5416 122.9582 L
154.6458 123.0703 L
154.7577 123.2239 L
154.8749 123.4218 L
154.9947 123.6744 L
155.1172 123.9973 L
155.2161 124.3151 L
155.3099 124.6926 L
155.3854 125.0625 L
155.4583 125.5025 L
155.5104 125.927 L
155.552 126.3515 L
155.5676 126.5729 L
155.5833 126.8176 L
155.5937 127.0521 L
155.6015 127.2682 L
155.6041 127.5286 L
155.6067 127.677 L
155.6067 127.8124 L
155.6041 128.0729 L
155.5989 128.3489 L
155.5885 128.6145 L
S
155.5885 128.6145 m
155.5729 128.9062 L
155.5364 129.4401 L
155.4739 130.0859 L
155.401 130.6822 L
155.2265 131.7447 L
154.9765 132.8957 L
154.3593 134.9244 L
153.9452 135.9452 L
153.5026 136.8411 L
152.9192 137.8098 L
152.3359 138.5911 L
151.7135 139.25 L
151.0234 139.8072 L
150.651 140.0391 L
150.2942 140.2161 L
149.9035 140.3672 L
149.6796 140.4322 L
149.4791 140.4817 L
149.3047 140.513 L
149.1432 140.5338 L
148.9635 140.5468 L
148.7734 140.552 L
148.677 140.552 L
148.5702 140.5468 L
148.3802 140.5338 L
148.1953 140.5078 L
148.026 140.4765 L
147.6874 140.388 L
147.3828 140.2786 L
146.7082 139.9452 L
146.3385 139.7004 L
146.0052 139.4375 L
145.2838 138.7395 L
144.69 138.0026 L
144.112 137.1146 L
143.2083 135.2656 L
142.7942 134.1354 L
142.4843 133.0729 L
142.2552 132.0703 L
142.1536 131.5442 L
142.0677 130.9869 L
142.0052 130.5078 L
141.9478 129.9869 L
141.9296 129.7629 L
141.914 129.5208 L
141.8983 129.2994 L
141.8905 129.0911 L
141.8827 128.8385 L
141.8801 128.6093 L
141.8749 128.3672 L
S
141.8749 128.3672 m
141.8801 128.2343 L
141.8827 128.112 L
141.8879 127.9114 L
141.8957 127.6926 L
141.9114 127.4687 L
141.9244 127.2682 L
141.9739 126.8176 L
142.0286 126.4322 L
142.1067 126.0182 L
142.1979 125.6588 L
142.2916 125.3437 L
142.4062 125.0469 L
142.5104 124.8228 L
142.6327 124.6119 L
142.7864 124.4088 L
142.8593 124.3333 L
142.9374 124.263 L
143.0078 124.2135 L
143.0911 124.1692 L
143.1614 124.138 L
143.2317 124.1224 L
143.3047 124.1094 L
143.3411 124.1094 L
143.3802 124.1094 L
143.4557 124.1224 L
143.5208 124.138 L
143.5598 124.1536 L
143.5989 124.1692 L
143.6744 124.2109 L
143.8332 124.3307 L
143.9687 124.4739 L
144.0911 124.6406 L
144.2292 124.8697 L
144.3515 125.125 L
144.5598 125.6926 L
144.7213 126.2994 L
144.7968 126.6822 L
144.8567 127.0521 L
144.9114 127.4843 L
144.9348 127.7083 L
144.953 127.9608 L
144.9713 128.2187 L
144.9817 128.4583 L
144.9869 128.6952 L
144.9921 128.9478 L
144.9921 129.1797 L
144.9895 129.3984 L
144.9843 129.6432 L
144.9765 129.9088 L
144.9608 130.1771 L
S
144.9608 130.1771 m
144.9426 130.4765 L
144.8853 131.0885 L
144.8176 131.6614 L
144.7343 132.2031 L
144.526 133.2734 L
144.2864 134.2474 L
143.5598 136.3515 L
143.0937 137.3541 L
142.5364 138.3307 L
141.388 139.8307 L
140.6796 140.4921 L
139.9791 140.9869 L
139.5676 141.2161 L
139.1823 141.3828 L
138.9687 141.4609 L
138.7343 141.5312 L
138.5078 141.5885 L
138.302 141.6275 L
138.1067 141.6562 L
137.901 141.677 L
137.69 141.6848 L
137.5729 141.6848 L
137.4609 141.6822 L
137.2604 141.6718 L
137.0781 141.651 L
136.9791 141.6354 L
136.8671 141.6171 L
136.6718 141.5781 L
136.302 141.4739 L
135.914 141.3307 L
135.2292 140.9791 L
134.4791 140.4453 L
133.8072 139.815 L
133.1224 139.0026 L
132.4505 138 L
131.5026 136.0781 L
131.0755 134.9035 L
130.7577 133.7812 L
130.6171 133.1614 L
130.5026 132.5807 L
130.4166 132.0547 L
130.3437 131.5026 L
130.3125 131.2187 L
130.2838 130.9114 L
130.263 130.6301 L
130.2474 130.3802 L
130.2395 130.2369 L
130.2343 130.0833 L
130.2317 129.9244 L
130.2292 129.7734 L
S
130.2292 129.7734 m
130.2265 129.6327 L
130.2265 129.4869 L
130.2317 129.2239 L
130.2369 128.9817 L
130.2422 128.8489 L
130.2526 128.7239 L
130.2682 128.4765 L
130.2916 128.2187 L
130.3463 127.7707 L
130.4114 127.388 L
130.5 126.9687 L
130.6093 126.5546 L
130.7213 126.2291 L
130.8541 125.914 L
130.9791 125.6718 L
131.125 125.4531 L
131.2838 125.263 L
131.3541 125.1927 L
131.4375 125.125 L
131.5208 125.0729 L
131.5963 125.0286 L
131.6718 124.9973 L
131.7499 124.9739 L
131.828 124.9608 L
131.9035 124.9582 L
131.9687 124.9608 L
132.0417 124.9712 L
132.1198 124.9947 L
132.1927 125.0234 L
132.2708 125.0625 L
132.3489 125.112 L
132.4817 125.2239 L
132.6249 125.3697 L
132.7707 125.5755 L
132.9218 125.8332 L
133.1667 126.4036 L
133.276 126.7369 L
133.3776 127.1224 L
133.4557 127.4869 L
133.526 127.9114 L
133.5885 128.4088 L
133.6171 128.6926 L
133.6327 128.966 L
133.6432 129.0989 L
133.6484 129.2265 L
133.6562 129.4687 L
133.6588 129.7369 L
133.6614 129.8879 L
133.6588 130.0286 L
133.6536 130.2916 L
S
133.6536 130.2916 m
133.6458 130.5442 L
133.6327 130.7734 L
133.6197 131.0286 L
133.5676 131.6015 L
133.5052 132.1432 L
133.3437 133.1406 L
133.1067 134.2083 L
132.7395 135.4713 L
132.3099 136.6171 L
131.8619 137.5911 L
131.302 138.5885 L
130.0573 140.2135 L
129.2994 140.9192 L
128.552 141.4427 L
128.1797 141.6484 L
127.8202 141.8098 L
127.4895 141.9322 L
127.138 142.0339 L
126.953 142.0755 L
126.7499 142.112 L
126.565 142.138 L
126.3932 142.1536 L
126.1875 142.164 L
126 142.1667 L
125.7942 142.1562 L
125.6926 142.1484 L
125.5781 142.1406 L
125.3619 142.1094 L
125.1667 142.0755 L
124.7187 141.9582 L
124.3333 141.8202 L
123.927 141.6354 L
123.2448 141.2292 L
122.5208 140.6588 L
121.7994 139.9166 L
121.0833 138.9869 L
119.9869 137.0182 L
119.526 135.8853 L
119.1745 134.7968 L
118.8697 133.5755 L
118.7473 132.953 L
118.638 132.2812 L
118.5676 131.7082 L
118.5416 131.4609 L
118.5208 131.1875 L
118.5026 130.9504 L
118.4869 130.7004 L
118.4765 130.4348 L
118.4713 130.1979 L
118.4687 130.0495 L
S
118.4687 130.0495 m
118.4687 129.914 L
118.4687 129.7655 L
118.4687 129.6119 L
118.4765 129.3541 L
118.4817 129.2135 L
118.4869 129.0807 L
118.5052 128.8385 L
118.5234 128.6223 L
118.5729 128.1484 L
118.638 127.7239 L
118.7109 127.3567 L
118.7994 126.9895 L
118.9062 126.6223 L
119.0182 126.3125 L
119.1276 126.0573 L
119.3645 125.6301 L
119.5052 125.4401 L
119.6432 125.2942 L
119.7994 125.1692 L
119.8879 125.1172 L
119.9713 125.0807 L
120.013 125.0625 L
120.0547 125.0521 L
120.1354 125.0338 L
120.1797 125.0286 L
120.2239 125.0286 L
120.2682 125.0286 L
120.3177 125.0338 L
120.3984 125.0521 L
120.4427 125.0625 L
120.4869 125.0807 L
120.5676 125.1146 L
120.6406 125.1562 L
120.7994 125.2812 L
120.9426 125.4322 L
121.0911 125.6353 L
121.2422 125.8931 L
121.4661 126.427 L
121.5807 126.7786 L
121.6718 127.1406 L
121.7473 127.5104 L
121.8098 127.8853 L
121.8541 128.2395 L
121.8905 128.6432 L
121.9062 128.8827 L
121.9192 129.1015 L
121.9218 129.2239 L
121.927 129.3619 L
121.9296 129.6093 L
121.9296 129.8463 L
S
121.9296 129.8463 m
121.9244 130.1015 L
121.9166 130.3203 L
121.9035 130.565 L
121.8879 130.8437 L
121.8671 131.1042 L
121.8046 131.7004 L
121.7317 132.2369 L
121.6327 132.8098 L
121.4166 133.8072 L
121.1172 134.8983 L
120.7161 136.0364 L
120.1979 137.2005 L
119.6406 138.2161 L
119.0599 139.0729 L
118.375 139.8957 L
117.7057 140.5312 L
116.9218 141.0937 L
116.4739 141.3385 L
116.0469 141.5234 L
115.664 141.651 L
115.4531 141.7057 L
115.2552 141.7473 L
115.0859 141.776 L
114.9035 141.7968 L
114.703 141.8124 L
114.5182 141.8176 L
114.414 141.8176 L
114.3047 141.815 L
114.1094 141.802 L
114 141.789 L
113.8983 141.7786 L
113.664 141.7395 L
113.4635 141.6926 L
113.2786 141.6458 L
112.8645 141.5026 L
112.4817 141.3333 L
112.1406 141.1484 L
111.3932 140.6275 L
110.7343 140.026 L
110.151 139.3619 L
108.9973 137.5702 L
108.4531 136.4114 L
108.026 135.2838 L
107.7057 134.2213 L
107.4322 133.0677 L
107.3281 132.5026 L
107.2422 131.9713 L
107.1745 131.4531 L
107.125 130.9869 L
107.0807 130.4348 L
S
107.0807 130.4348 m
107.0625 130.138 L
107.0521 129.8619 L
107.0469 129.6067 L
107.0443 129.375 L
107.0443 129.125 L
107.0495 128.8671 L
107.0573 128.6067 L
107.0625 128.4661 L
107.0703 128.3359 L
107.1094 127.8645 L
107.1354 127.6119 L
107.1692 127.3411 L
107.2422 126.8775 L
107.3151 126.5078 L
107.4062 126.1354 L
107.5989 125.5416 L
107.7239 125.2448 L
107.8619 124.9791 L
108.0026 124.7655 L
108.1328 124.6067 L
108.2734 124.4687 L
108.3567 124.4114 L
108.4322 124.3697 L
108.5026 124.3385 L
108.5676 124.3151 L
108.6406 124.3021 L
108.7161 124.2942 L
108.7916 124.2994 L
108.8359 124.3072 L
108.8749 124.3151 L
108.9478 124.3411 L
109.0208 124.375 L
109.1015 124.427 L
109.1771 124.4843 L
109.3385 124.651 L
109.4739 124.8437 L
109.5937 125.0547 L
109.7161 125.3203 L
109.8359 125.6484 L
110.0078 126.2994 L
110.0807 126.7057 L
110.138 127.1068 L
110.1588 127.3021 L
110.1797 127.5208 L
110.1953 127.7187 L
110.2057 127.9322 L
110.2161 128.1328 L
110.2239 128.3541 L
110.2265 128.5598 L
110.2265 128.7551 L
S
110.2265 128.7551 m
110.2239 129.0026 L
110.2135 129.2422 L
110.2057 129.4583 L
110.1953 129.7004 L
110.151 130.2448 L
110.0937 130.7629 L
109.9244 131.8775 L
109.7968 132.5156 L
109.6588 133.0989 L
109.3645 134.1458 L
108.9713 135.2604 L
108.1224 137.0599 L
107.5781 137.9374 L
107.026 138.6692 L
106.3828 139.3567 L
105.6432 139.9582 L
105.2942 140.1823 L
104.914 140.3828 L
104.5859 140.5208 L
104.4062 140.5833 L
104.2187 140.638 L
104.0521 140.6796 L
103.8671 140.7187 L
103.6952 140.7447 L
103.539 140.7603 L
103.3515 140.7707 L
103.1797 140.7707 L
102.9843 140.7629 L
102.802 140.7473 L
102.6406 140.7239 L
102.4687 140.6926 L
102.164 140.6119 L
101.8411 140.5026 L
101.4895 140.3437 L
100.7577 139.8931 L
100.0911 139.3281 L
99.5286 138.7135 L
98.953 137.94 L
98.3828 136.9869 L
97.8437 135.8697 L
97.4349 134.8202 L
97.0703 133.6588 L
96.7629 132.4166 L
96.552 131.2656 L
96.4609 130.6301 L
96.3932 130.0417 L
96.3411 129.4036 L
96.3177 129.0547 L
96.3125 128.9035 L
96.3047 128.7369 L
S
96.3047 128.7369 m
96.2942 128.4687 L
96.2916 128.3203 L
96.2916 128.1823 L
96.289 127.9426 L
96.2916 127.6848 L
96.2942 127.552 L
96.2994 127.4062 L
96.3072 127.2552 L
96.3125 127.1198 L
96.3255 126.8775 L
96.3437 126.6249 L
96.3906 126.1406 L
96.4479 125.7109 L
96.513 125.3203 L
96.5859 124.9817 L
96.7525 124.3541 L
96.8541 124.0677 L
96.9712 123.7968 L
97.0989 123.5572 L
97.2239 123.3672 L
97.3437 123.2317 L
97.4088 123.1719 L
97.4765 123.1224 L
97.5338 123.0859 L
97.5885 123.0599 L
97.6484 123.0391 L
97.7135 123.0234 L
97.7734 123.0208 L
97.8385 123.026 L
97.9088 123.0417 L
97.966 123.0651 L
98.026 123.0963 L
98.0807 123.1328 L
98.1797 123.2187 L
98.2864 123.3359 L
98.3932 123.5025 L
98.4973 123.6926 L
98.5989 123.9322 L
98.7629 124.4531 L
98.8463 124.8176 L
98.914 125.2031 L
98.966 125.5729 L
99.0078 126.0052 L
99.0286 126.2526 L
99.0391 126.4921 L
99.0469 126.7135 L
99.0547 126.9582 L
99.0573 127.0859 L
99.0573 127.2317 L
99.0573 127.3802 L
S
99.0573 127.3802 m
99.0547 127.526 L
99.0469 127.7864 L
99.0417 127.9322 L
99.0339 128.0677 L
99.0026 128.5833 L
98.9765 128.8801 L
98.9504 129.1588 L
98.8124 130.2292 L
98.6249 131.2526 L
98.3619 132.3567 L
97.7395 134.2812 L
97.2942 135.3229 L
96.7603 136.3255 L
96.2135 137.1667 L
95.6744 137.8254 L
95.0807 138.4036 L
94.4973 138.8332 L
94.1666 139.013 L
93.8593 139.151 L
93.5182 139.2656 L
93.3489 139.3073 L
93.2578 139.3255 L
93.1588 139.3411 L
92.9921 139.3619 L
92.8385 139.3698 L
92.6874 139.3724 L
92.5468 139.3672 L
92.3802 139.3515 L
92.2317 139.3333 L
92.0573 139.2994 L
91.8957 139.2552 L
91.6015 139.1562 L
91.3385 139.0391 L
90.7525 138.69 L
90.1719 138.2031 L
89.5833 137.5546 L
88.6223 136.0781 L
88.1094 135.0156 L
87.6848 133.9166 L
87.3619 132.8853 L
87.0599 131.7057 L
86.828 130.5416 L
86.6666 129.4479 L
86.6015 128.8515 L
86.5546 128.3151 L
86.5312 128.0182 L
86.513 127.703 L
86.5 127.4036 L
86.4921 127.1328 L
86.4843 126.8827 L
S
86.4843 126.8827 m
86.4817 126.6197 L
86.4817 126.3724 L
86.4843 126.1458 L
86.4921 125.9478 L
86.5 125.7343 L
86.5078 125.513 L
86.5182 125.3099 L
86.5546 124.8671 L
86.5937 124.4791 L
86.651 124.0573 L
86.7109 123.6848 L
86.8515 123.0443 L
86.9426 122.7291 L
87.0338 122.4635 L
87.1302 122.2396 L
87.2369 122.0338 L
87.3567 121.8541 L
87.414 121.7838 L
87.4687 121.7291 L
87.5182 121.69 L
87.5677 121.6536 L
87.6249 121.6223 L
87.677 121.6015 L
87.7265 121.5911 L
87.776 121.5859 L
87.8228 121.5885 L
87.8697 121.5963 L
87.927 121.6171 L
87.9791 121.6406 L
88.0364 121.6822 L
88.0885 121.7265 L
88.1849 121.8359 L
88.2864 121.9843 L
88.3854 122.1771 L
88.4843 122.4296 L
88.5677 122.6822 L
88.6458 122.9869 L
88.7135 123.289 L
88.7707 123.651 L
88.8202 124.0026 L
88.8541 124.3541 L
88.8723 124.5755 L
88.8879 124.8228 L
88.8931 124.9374 L
88.901 125.0599 L
88.9088 125.289 L
88.9114 125.5104 L
88.914 125.7239 L
88.914 125.9582 L
88.9088 126.2213 L
S
88.9088 126.2213 m
88.9036 126.4843 L
88.8931 126.638 L
88.8879 126.7812 L
88.8515 127.388 L
88.802 127.9244 L
88.7369 128.5078 L
88.5624 129.6874 L
88.3437 130.7734 L
88.0417 131.9504 L
87.6588 133.1406 L
86.8775 134.9504 L
86.3619 135.828 L
85.8463 136.5338 L
85.3099 137.0963 L
85.0182 137.3411 L
84.703 137.5598 L
84.4192 137.7135 L
84.2734 137.7838 L
84.1068 137.8463 L
83.9582 137.8905 L
83.8228 137.9244 L
83.6926 137.9478 L
83.552 137.9687 L
83.4166 137.9765 L
83.2942 137.9791 L
83.1484 137.9713 L
83.0156 137.9556 L
82.8905 137.9374 L
82.776 137.9114 L
82.5182 137.8307 L
82.2604 137.7239 L
81.9791 137.5702 L
81.427 137.151 L
80.8775 136.5676 L
80.3854 135.8853 L
79.5572 134.3073 L
79.1588 133.2864 L
78.8359 132.2682 L
78.5364 131.1015 L
78.276 129.802 L
78.1771 129.1797 L
78.0885 128.5208 L
78.0208 127.9166 L
77.9712 127.3541 L
77.9374 126.8359 L
77.9244 126.5729 L
77.9088 126.289 L
77.9036 126.1302 L
77.901 125.9817 L
77.8983 125.8437 L
S
77.8983 125.8437 m
77.8957 125.6978 L
77.8931 125.4453 L
77.8931 125.1719 L
77.8957 124.9296 L
77.9036 124.6796 L
77.9088 124.4687 L
77.9218 124.2448 L
77.9504 123.7551 L
77.9895 123.3229 L
78.0338 122.9322 L
78.0807 122.6015 L
78.2057 121.9218 L
78.276 121.6249 L
78.3619 121.3281 L
78.4505 121.0755 L
78.552 120.8437 L
78.6484 120.6614 L
78.7421 120.5234 L
78.789 120.4687 L
78.8359 120.4192 L
78.8801 120.3828 L
78.927 120.3489 L
78.9582 120.3307 L
78.9869 120.3177 L
79.0156 120.3072 L
79.0443 120.2994 L
79.0963 120.2916 L
79.151 120.2942 L
79.1823 120.2994 L
79.2109 120.3072 L
79.2422 120.3203 L
79.2734 120.3359 L
79.3255 120.3697 L
79.3828 120.4192 L
79.4817 120.5364 L
79.5885 120.7005 L
79.6744 120.8749 L
79.7603 121.0989 L
79.9192 121.638 L
79.9843 121.9582 L
80.0521 122.3385 L
80.0963 122.69 L
80.1432 123.0963 L
80.1744 123.5 L
80.1849 123.677 L
80.1927 123.8801 L
80.2057 124.1224 L
80.2083 124.2578 L
80.2109 124.3854 L
80.2135 124.6171 L
S
80.2135 124.6171 m
80.2161 124.8697 L
80.2135 125.0156 L
80.2135 125.1744 L
80.2109 125.3255 L
80.2057 125.4635 L
80.1979 125.7343 L
80.1849 126.0208 L
80.151 126.5546 L
80.112 127.0625 L
79.9765 128.2369 L
79.815 129.2812 L
79.5885 130.4114 L
79.3177 131.4765 L
78.9817 132.5572 L
78.6249 133.4973 L
78.2656 134.2734 L
77.9062 134.9166 L
77.4869 135.5312 L
77.0286 136.0469 L
76.789 136.263 L
76.526 136.4583 L
76.2786 136.6015 L
76.0469 136.703 L
75.9348 136.7421 L
75.8176 136.7734 L
75.7005 136.7968 L
75.5937 136.8098 L
75.4609 136.8176 L
75.388 136.8202 L
75.3151 136.8176 L
75.1901 136.8046 L
75.0547 136.7838 L
74.9348 136.7525 L
74.8228 136.7187 L
74.5729 136.6145 L
74.3047 136.4583 L
74.0625 136.276 L
73.539 135.7473 L
73.1068 135.151 L
72.6796 134.3984 L
72.0026 132.7629 L
71.6874 131.7265 L
71.4296 130.6978 L
71.2005 129.5208 L
71.1015 128.8957 L
71.0104 128.2213 L
70.9426 127.6171 L
70.8905 127.0755 L
70.8515 126.5286 L
70.8228 126.0208 L
S
70.8228 126.0208 m
70.8098 125.7369 L
70.8072 125.5807 L
70.802 125.4401 L
70.7968 125.1849 L
70.7942 124.9114 L
70.7942 124.7577 L
70.7942 124.6171 L
70.7968 124.3515 L
70.7994 124.2083 L
70.802 124.0729 L
70.8124 123.7734 L
70.8254 123.5078 L
70.8411 123.2265 L
70.8801 122.7369 L
70.9244 122.2838 L
70.9765 121.8879 L
71.1146 121.0833 L
71.1979 120.7291 L
71.2968 120.3828 L
71.388 120.1172 L
71.4921 119.8697 L
71.5911 119.6874 L
71.6952 119.5312 L
71.7916 119.427 L
71.8463 119.3776 L
71.901 119.3437 L
71.9478 119.3203 L
71.9921 119.3072 L
72.0417 119.2994 L
72.0911 119.2942 L
72.1484 119.3072 L
72.1979 119.3229 L
72.2265 119.3359 L
72.2578 119.3515 L
72.3125 119.3932 L
72.4166 119.4973 L
72.5104 119.6249 L
72.6119 119.8046 L
72.7161 120.0417 L
72.8098 120.3072 L
72.9062 120.6458 L
72.9895 120.9973 L
73.0573 121.3541 L
73.1146 121.7161 L
73.1692 122.1406 L
73.2057 122.5156 L
73.2396 122.94 L
73.2578 123.1797 L
73.2682 123.4088 L
73.276 123.6301 L
S
73.276 123.6301 m
73.2864 123.8671 L
73.289 124.1302 L
73.2916 124.3724 L
73.2942 124.5078 L
73.2916 124.6588 L
73.289 124.9322 L
73.2864 125.1927 L
73.276 125.4713 L
73.2656 125.7083 L
73.2552 125.9739 L
73.2135 126.5755 L
73.1588 127.2291 L
73.0208 128.4114 L
72.8359 129.5755 L
72.6197 130.6171 L
72.3125 131.7916 L
71.9947 132.7682 L
71.6744 133.552 L
71.3021 134.2994 L
70.8827 134.9504 L
70.6796 135.1979 L
70.4635 135.427 L
70.2422 135.6171 L
70.0364 135.7577 L
69.94 135.815 L
69.8332 135.8645 L
69.7291 135.9062 L
69.6327 135.9374 L
69.5234 135.966 L
69.4661 135.9739 L
69.401 135.9817 L
69.3385 135.9869 L
69.2708 135.9895 L
69.2161 135.9869 L
69.1536 135.9843 L
69.0417 135.9713 L
68.9791 135.9582 L
68.9244 135.9452 L
68.815 135.9114 L
68.7109 135.8723 L
68.4895 135.7551 L
68.2578 135.5885 L
67.8515 135.1901 L
67.4401 134.6119 L
67.0156 133.8176 L
66.6666 132.9635 L
66.3672 132.0547 L
66.1328 131.1562 L
65.914 130.1406 L
65.7213 128.9895 L
S
65.7213 128.9895 m
65.5885 127.8905 L
65.5312 127.2786 L
65.4895 126.7005 L
65.4713 126.3932 L
65.4557 126.0729 L
65.4505 125.9062 L
65.4427 125.7239 L
65.4375 125.5677 L
65.4349 125.401 L
65.4296 125.1094 L
65.4296 124.8385 L
65.4296 124.5546 L
65.4322 124.3932 L
65.4349 124.2422 L
65.4427 123.9739 L
65.4531 123.7317 L
65.4635 123.4557 L
65.4791 123.2005 L
65.513 122.7395 L
65.5494 122.3281 L
65.6588 121.4557 L
65.7343 121.0078 L
65.8124 120.6145 L
65.9817 119.966 L
66.1849 119.4036 L
66.3072 119.151 L
66.427 118.9608 L
66.539 118.8228 L
66.6406 118.7317 L
66.7005 118.6926 L
66.7317 118.6744 L
66.7629 118.6614 L
66.8228 118.6406 L
66.8801 118.6327 L
66.9296 118.6327 L
66.9817 118.638 L
67.0364 118.6536 L
67.0833 118.6718 L
67.1328 118.7005 L
67.1901 118.7395 L
67.3047 118.8463 L
67.4244 119.0026 L
67.5312 119.1849 L
67.6432 119.4166 L
67.7577 119.7135 L
67.9478 120.3515 L
68.0963 121.0651 L
68.164 121.4505 L
68.2213 121.8879 L
68.2708 122.2864 L
S
68.2708 122.2864 m
68.3125 122.7421 L
68.3333 123.026 L
68.3515 123.2942 L
68.3672 123.5781 L
68.3802 123.8411 L
68.388 124.0989 L
68.3932 124.3463 L
68.3958 124.6145 L
68.3984 124.7629 L
68.3984 124.901 L
68.3984 125.1692 L
68.3932 125.4583 L
68.388 125.7317 L
68.3802 125.9817 L
68.3672 126.2786 L
68.3515 126.6015 L
68.3125 127.1875 L
68.2604 127.802 L
68.1901 128.4479 L
68.0338 129.5859 L
67.8463 130.6171 L
67.6432 131.5078 L
67.3932 132.3958 L
67.0859 133.2604 L
66.776 133.9478 L
66.4687 134.4843 L
66.1614 134.8931 L
65.9973 135.0599 L
65.8202 135.2135 L
65.6223 135.3385 L
65.5156 135.3932 L
65.4166 135.4296 L
65.3177 135.4557 L
65.2343 135.4739 L
65.1328 135.4817 L
65.0364 135.4791 L
64.9895 135.4765 L
64.9348 135.4687 L
64.8801 135.4557 L
64.8254 135.4427 L
64.7317 135.4114 L
64.6327 135.3645 L
64.4088 135.2265 L
64.2031 135.0521 L
63.8697 134.6536 L
63.5234 134.0833 L
63.1875 133.3437 L
62.9062 132.5364 L
62.6562 131.6197 L
62.427 130.5312 L
S
62.427 130.5312 m
62.25 129.4296 L
62.1823 128.8853 L
62.1276 128.3724 L
62.0807 127.8619 L
62.0469 127.3958 L
62.0182 126.8749 L
62.0078 126.5885 L
62 126.3151 L
61.9947 126.0521 L
61.9869 125.7734 L
61.9869 125.513 L
61.9869 125.2786 L
61.9921 125 L
61.9947 124.8463 L
61.9973 124.7057 L
62.0052 124.4453 L
62.0156 124.1771 L
62.0443 123.6275 L
62.0807 123.1224 L
62.1771 122.2187 L
62.2422 121.7447 L
62.3099 121.3255 L
62.4921 120.4583 L
62.6588 119.8567 L
62.8645 119.2916 L
62.9739 119.0547 L
63.0963 118.8306 L
63.2161 118.6536 L
63.3307 118.5182 L
63.4557 118.4062 L
63.5234 118.3567 L
63.5911 118.3229 L
63.651 118.2968 L
63.7083 118.2812 L
63.7707 118.2708 L
63.8385 118.2708 L
63.9062 118.276 L
63.9452 118.289 L
63.9791 118.2968 L
64.0443 118.3255 L
64.1068 118.3593 L
64.2474 118.4687 L
64.3229 118.5468 L
64.3932 118.6301 L
64.638 119.0156 L
64.7707 119.2942 L
64.8879 119.5937 L
65.112 120.2994 L
65.3151 121.2005 L
65.4635 122.0937 L
S
65.4635 122.0937 m
65.5755 122.9973 L
65.6223 123.5442 L
65.6562 124.0573 L
65.6744 124.3437 L
65.6874 124.6588 L
65.6978 124.9608 L
65.7057 125.2422 L
65.7083 125.513 L
65.7109 125.8046 L
65.7083 126.0833 L
65.7057 126.3385 L
65.7005 126.6353 L
65.6978 126.8046 L
65.69 126.9634 L
65.6666 127.5546 L
65.6458 127.8723 L
65.6249 128.1719 L
65.5807 128.7265 L
65.4401 129.9348 L
65.289 130.8879 L
65.0885 131.8593 L
64.8437 132.7707 L
64.5885 133.513 L
64.3255 134.1015 L
64.0703 134.5364 L
63.9244 134.7369 L
63.7629 134.9166 L
63.6093 135.0521 L
63.4635 135.1458 L
63.388 135.1849 L
63.3047 135.2161 L
63.2369 135.2343 L
63.1588 135.2474 L
63.0781 135.2552 L
63.0312 135.2526 L
62.9895 135.2474 L
62.9062 135.2343 L
62.8332 135.2109 L
62.7577 135.1823 L
62.6848 135.1458 L
62.552 135.0573 L
62.4088 134.9348 L
62.2552 134.7655 L
61.9452 134.3047 L
61.638 133.6484 L
61.3776 132.8931 L
61.1666 132.0989 L
60.9817 131.2135 L
60.8228 130.1927 L
60.7603 129.6692 L
S
60.7603 129.6692 m
60.7083 129.164 L
60.6718 128.7109 L
60.6406 128.2031 L
60.6249 127.9296 L
60.6119 127.6353 L
60.6067 127.4687 L
60.6041 127.3229 L
60.5937 127.0286 L
60.5911 126.7603 L
60.5911 126.4713 L
60.5911 126.1953 L
60.5963 125.9426 L
60.6041 125.651 L
60.6119 125.3828 L
60.6223 125.0859 L
60.6406 124.7707 L
60.6848 124.1354 L
60.7369 123.5677 L
60.8072 122.94 L
60.901 122.2968 L
61.1068 121.2239 L
61.2526 120.6301 L
61.4062 120.1198 L
61.7213 119.3099 L
S
43.5781 177.6354 m
47.789 176.3047 L
52.2291 175.2604 L
54.5624 174.8567 L
56.7343 174.5755 L
57.9843 174.4531 L
59.1172 174.3672 L
59.7473 174.3307 L
60.4296 174.2968 L
60.7421 174.2864 L
61.0729 174.2734 L
61.3567 174.2682 L
61.6666 174.263 L
61.9608 174.2578 L
62.2317 174.2552 L
62.4921 174.2552 L
62.7681 174.2552 L
63.0417 174.2552 L
63.2968 174.2578 L
63.526 174.2604 L
63.776 174.2656 L
64.3489 174.2786 L
64.9582 174.302 L
66.0443 174.3593 L
67.0547 174.4296 L
67.9973 174.513 L
70.1432 174.7629 L
72.4843 175.1276 L
74.7005 175.5572 L
78.8567 176.5807 L
87.4401 179.5208 L
96.5755 183.6666 L
105.3698 188.3281 L
113.8254 193.0547 L
122.8307 197.8697 L
131.4973 201.7707 L
135.9869 203.3489 L
138.2708 204.0104 L
140.7135 204.5989 L
143.0286 205.0417 L
145.1328 205.3385 L
146.1484 205.4453 L
146.6822 205.4947 L
147.25 205.5364 L
147.7447 205.5676 L
148.289 205.5963 L
148.7838 205.6171 L
149.026 205.6249 L
149.2474 205.6301 L
149.526 205.638 L
S
149.526 205.638 m
149.6796 205.638 L
149.8254 205.6406 L
150.0833 205.6432 L
150.3619 205.6432 L
150.5078 205.6406 L
150.6692 205.6406 L
150.8385 205.638 L
150.9947 205.6327 L
151.276 205.6275 L
151.5781 205.6197 L
152.1719 205.5963 L
152.7343 205.5676 L
153.7916 205.4947 L
154.8254 205.3984 L
155.7812 205.2838 L
157.9426 204.953 L
160.1042 204.5208 L
162.1328 204.026 L
166.7499 202.5989 L
175.427 198.953 L
184.6536 194.1536 L
193.539 189.1927 L
202.0885 184.5807 L
211.1849 180.2838 L
219.94 177.0703 L
224.7317 175.7864 L
226.927 175.3203 L
229.2474 174.9192 L
231.3854 174.6301 L
232.5208 174.5104 L
233.7395 174.4036 L
234.3125 174.3645 L
234.8567 174.3333 L
235.3854 174.3073 L
235.8775 174.289 L
236.3411 174.2734 L
236.5781 174.2682 L
236.8333 174.263 L
237.0885 174.2578 L
237.3281 174.2552 L
237.6119 174.2552 L
237.8749 174.25 L
238.1588 174.2552 L
238.4296 174.2578 L
238.6692 174.2604 L
238.9348 174.263 L
239.2187 174.2708 L
239.5234 174.2786 L
240.0677 174.2994 L
241.0391 174.3489 L
S
241.0391 174.3489 m
242.1094 174.4218 L
243.2604 174.526 L
244.5 174.6666 L
246.7421 174.9895 L
249.0078 175.414 L
251.4817 175.9869 L
255.9791 177.3203 L
256.8931 177.6354 L
S
35.0026 170.3593 m
39.2135 169.1667 L
43.6562 168.2292 L
45.9869 167.8697 L
48.1588 167.6145 L
49.4088 167.5052 L
50.5442 167.427 L
51.1719 167.3958 L
51.8541 167.3645 L
52.1666 167.3567 L
52.5 167.3463 L
52.7838 167.3385 L
53.0937 167.3333 L
53.388 167.3281 L
53.6562 167.3281 L
53.9166 167.3255 L
54.1953 167.3255 L
54.4661 167.3281 L
54.7213 167.3281 L
54.9504 167.3307 L
55.2031 167.3359 L
55.776 167.3515 L
56.3828 167.3698 L
57.4687 167.4218 L
58.4791 167.4843 L
59.4218 167.5624 L
61.5677 167.7838 L
63.9088 168.1067 L
66.1276 168.4947 L
70.2812 169.414 L
78.8671 172.0495 L
88 175.7682 L
96.7942 179.9452 L
105.2526 184.1823 L
114.2552 188.4973 L
122.9218 192 L
127.4114 193.4166 L
129.6978 194.0078 L
132.138 194.5338 L
134.4531 194.9322 L
136.5572 195.1979 L
137.5729 195.2942 L
138.1067 195.3385 L
138.6744 195.375 L
139.1692 195.4036 L
139.7135 195.4296 L
140.2083 195.4453 L
140.4505 195.4557 L
140.6718 195.4583 L
140.9504 195.4635 L
S
140.9504 195.4635 m
141.1042 195.4661 L
141.25 195.4661 L
141.5104 195.4687 L
141.789 195.4687 L
141.9348 195.4687 L
142.0963 195.4661 L
142.263 195.4661 L
142.4218 195.4635 L
142.703 195.4583 L
143.0026 195.4479 L
143.5989 195.4296 L
144.164 195.4036 L
145.2161 195.3385 L
146.25 195.25 L
147.2057 195.1484 L
149.3672 194.8541 L
151.5286 194.4661 L
153.5572 194.0208 L
158.1771 192.7421 L
166.8515 189.4713 L
176.0781 185.1692 L
184.966 180.7213 L
193.513 176.5859 L
202.6093 172.7317 L
211.3645 169.8515 L
216.1562 168.7004 L
218.3515 168.2838 L
220.6718 167.9218 L
222.8124 167.664 L
223.9452 167.5546 L
225.164 167.4609 L
225.7369 167.427 L
226.2812 167.3984 L
226.8124 167.375 L
227.3021 167.3567 L
227.7655 167.3463 L
228.0026 167.3385 L
228.2578 167.3333 L
228.513 167.3307 L
228.7525 167.3281 L
229.0365 167.3255 L
229.2994 167.3255 L
229.5859 167.3255 L
229.8541 167.3281 L
230.0989 167.3307 L
230.3593 167.3359 L
230.6432 167.3437 L
230.9478 167.3489 L
231.4921 167.3672 L
232.4635 167.4114 L
S
232.4635 167.4114 m
233.5338 167.4791 L
234.6848 167.5702 L
235.9244 167.6952 L
238.1666 167.9869 L
240.4322 168.3672 L
242.9062 168.8801 L
247.4036 170.0755 L
248.3177 170.3593 L
S
27.638 158.7838 m
31.8515 157.8098 L
36.2942 157.0443 L
38.6249 156.7499 L
40.7968 156.5442 L
42.0443 156.4557 L
43.1797 156.3932 L
43.8072 156.3645 L
44.4895 156.3411 L
44.8046 156.3333 L
45.1354 156.3229 L
45.4218 156.3177 L
45.7317 156.3125 L
46.0234 156.3099 L
46.2942 156.3073 L
46.5546 156.3073 L
46.8306 156.3073 L
47.1015 156.3073 L
47.3593 156.3099 L
47.5885 156.3125 L
47.8385 156.3151 L
48.4114 156.3281 L
49.0182 156.3437 L
50.1042 156.3828 L
51.1146 156.4375 L
52.0599 156.4973 L
54.2031 156.6796 L
56.5442 156.9478 L
58.7629 157.263 L
62.9192 158.0104 L
71.5052 160.164 L
80.638 163.1979 L
89.4349 166.6119 L
97.8905 170.0703 L
106.8957 173.5937 L
115.5598 176.4531 L
120.0469 177.6067 L
122.3333 178.0911 L
124.7734 178.5234 L
127.0885 178.8463 L
129.1979 179.0625 L
130.2109 179.1432 L
130.7473 179.1771 L
131.3125 179.2083 L
131.8072 179.2343 L
132.3515 179.2552 L
132.8463 179.2682 L
133.0911 179.2734 L
133.3099 179.276 L
133.5911 179.2812 L
S
133.5911 179.2812 m
133.7447 179.2812 L
133.8879 179.2864 L
134.1458 179.2864 L
134.4244 179.2864 L
134.5729 179.2864 L
134.7317 179.2864 L
134.901 179.2812 L
135.0599 179.2786 L
135.3411 179.276 L
135.6406 179.2708 L
136.2369 179.2552 L
136.7994 179.2317 L
137.8541 179.1771 L
138.8879 179.1067 L
139.8437 179.0234 L
142.0052 178.7812 L
144.1667 178.4661 L
146.1927 178.1042 L
150.8124 177.0573 L
159.4869 174.3906 L
168.7135 170.8775 L
177.6015 167.2422 L
186.1484 163.8697 L
195.2448 160.7213 L
204.0026 158.3698 L
208.7916 157.4296 L
210.9869 157.0885 L
213.3073 156.7968 L
215.4505 156.5833 L
216.5859 156.4947 L
217.7994 156.4166 L
218.375 156.3906 L
218.9192 156.3672 L
219.4479 156.3463 L
219.9374 156.3333 L
220.401 156.3203 L
220.6406 156.3177 L
220.8931 156.3125 L
221.151 156.3099 L
221.388 156.3099 L
221.677 156.3073 L
221.9374 156.3073 L
222.2213 156.3073 L
222.4921 156.3099 L
222.7343 156.3125 L
222.9947 156.3151 L
223.2838 156.3203 L
223.5833 156.3281 L
224.1276 156.3411 L
225.1015 156.3776 L
S
225.1015 156.3776 m
226.1693 156.4322 L
227.3229 156.5052 L
228.5624 156.6093 L
230.802 156.8463 L
233.0703 157.1562 L
235.5416 157.5755 L
240.0417 158.5546 L
240.953 158.7838 L
S
21.9895 143.6978 m
26.2031 143.0104 L
30.6432 142.4687 L
32.9739 142.2604 L
35.1484 142.1146 L
36.3958 142.0521 L
37.5312 142.0052 L
38.1588 141.9869 L
38.8411 141.9687 L
39.1536 141.9635 L
39.4843 141.9582 L
39.7681 141.9556 L
40.0781 141.953 L
40.3724 141.9504 L
40.6458 141.9504 L
40.9036 141.9478 L
41.1797 141.9478 L
41.4531 141.9504 L
41.7083 141.9504 L
41.94 141.953 L
42.1875 141.953 L
42.7603 141.9608 L
43.3697 141.9713 L
44.4557 142.0026 L
45.4661 142.0417 L
46.4114 142.0833 L
48.5546 142.2109 L
50.8957 142.3984 L
53.1146 142.6223 L
57.2708 143.1536 L
65.8541 144.6744 L
74.9895 146.8176 L
83.7838 149.2343 L
92.2396 151.6796 L
101.2448 154.1719 L
109.9088 156.1927 L
114.3984 157.0104 L
116.6822 157.3515 L
119.1224 157.6562 L
121.4401 157.8853 L
123.5442 158.0391 L
124.5598 158.0963 L
125.0963 158.1198 L
125.6614 158.1406 L
126.1562 158.1588 L
126.703 158.1719 L
127.1979 158.1849 L
127.4401 158.1875 L
127.6588 158.1901 L
127.94 158.1927 L
S
127.94 158.1927 m
128.0937 158.1927 L
128.2369 158.1953 L
128.4973 158.1953 L
128.776 158.1953 L
128.9218 158.1953 L
129.0833 158.1953 L
129.25 158.1927 L
129.4062 158.1927 L
129.6874 158.1901 L
129.9895 158.1849 L
130.5859 158.1719 L
131.1484 158.1588 L
132.2031 158.1198 L
133.2395 158.0677 L
134.1927 158.0104 L
136.3567 157.8411 L
138.5182 157.6171 L
140.5442 157.3593 L
145.1614 156.6197 L
153.8385 154.7343 L
163.0651 152.25 L
171.9504 149.6796 L
180.4973 147.2942 L
189.5963 145.0703 L
198.3541 143.4062 L
203.1432 142.7395 L
205.3385 142.5 L
207.6588 142.2916 L
209.7994 142.1432 L
210.9322 142.0807 L
212.151 142.026 L
212.7265 142.0052 L
213.2682 141.9895 L
213.7968 141.9739 L
214.289 141.966 L
214.7525 141.9582 L
214.9895 141.9556 L
215.2448 141.953 L
215.5 141.9504 L
215.7395 141.9504 L
216.0234 141.9478 L
216.2864 141.9478 L
216.5702 141.9478 L
216.8411 141.9504 L
217.0833 141.9504 L
217.3463 141.953 L
217.6327 141.9582 L
217.9348 141.9608 L
218.4791 141.9713 L
219.4479 141.9973 L
S
219.4479 141.9973 m
220.5182 142.0339 L
221.6744 142.0885 L
222.914 142.1588 L
225.1536 142.3307 L
227.4192 142.5494 L
229.8905 142.8463 L
234.3932 143.5364 L
235.3047 143.6978 L
S
18.4375 126.1328 m
22.651 125.7734 L
27.0885 125.4947 L
29.4218 125.388 L
31.5937 125.3099 L
32.8437 125.2786 L
33.9791 125.2578 L
34.6067 125.2448 L
35.289 125.2369 L
35.6015 125.2343 L
35.9322 125.2317 L
36.2161 125.2291 L
36.5286 125.2291 L
36.8202 125.2265 L
37.0937 125.2265 L
37.3515 125.2265 L
37.6301 125.2265 L
37.901 125.2265 L
38.1562 125.2265 L
38.388 125.2291 L
38.638 125.2291 L
39.2109 125.2317 L
39.8176 125.2369 L
40.9036 125.2552 L
41.914 125.2734 L
42.8567 125.2942 L
45.0026 125.3619 L
47.3437 125.4583 L
49.5624 125.5755 L
53.7161 125.8489 L
62.3047 126.6353 L
71.4375 127.7473 L
80.2317 128.9973 L
88.6874 130.263 L
97.6926 131.5546 L
106.3567 132.5989 L
110.8463 133.0208 L
113.1302 133.1979 L
115.5729 133.3567 L
117.8879 133.4739 L
119.9921 133.5572 L
121.0078 133.5859 L
121.5416 133.5963 L
122.1094 133.6067 L
122.6041 133.6171 L
123.151 133.6249 L
123.6458 133.6301 L
123.8853 133.6301 L
124.1094 133.6327 L
124.388 133.6327 L
S
124.388 133.6327 m
124.5416 133.6354 L
124.6848 133.6354 L
124.9452 133.6354 L
125.2239 133.6354 L
125.3724 133.6354 L
125.5312 133.6354 L
125.6978 133.6354 L
125.8567 133.6327 L
126.1354 133.6327 L
126.4375 133.6301 L
127.0339 133.6249 L
127.5989 133.6171 L
128.651 133.5963 L
129.6848 133.5702 L
130.6406 133.539 L
132.802 133.4505 L
134.9635 133.3359 L
136.9921 133.2031 L
141.6093 132.8202 L
150.2864 131.8437 L
159.513 130.5572 L
168.401 129.2265 L
176.9478 127.9921 L
186.0443 126.8411 L
194.802 125.9791 L
199.5911 125.6353 L
201.7864 125.513 L
204.1067 125.4036 L
206.25 125.3255 L
207.3802 125.2942 L
208.5989 125.2656 L
209.1719 125.2552 L
209.7161 125.2448 L
210.2448 125.2396 L
210.7369 125.2343 L
211.2005 125.2317 L
211.4375 125.2291 L
211.6926 125.2291 L
211.9478 125.2265 L
212.1875 125.2265 L
212.4713 125.2265 L
212.7343 125.2265 L
213.0208 125.2265 L
213.289 125.2265 L
213.5312 125.2265 L
213.7942 125.2291 L
214.0781 125.2317 L
214.3828 125.2317 L
214.927 125.2369 L
215.8983 125.25 L
S
215.8983 125.25 m
216.9687 125.2708 L
218.1198 125.2994 L
219.3619 125.3359 L
221.6015 125.4218 L
223.8697 125.5364 L
226.3411 125.69 L
230.8411 126.0469 L
231.7525 126.1328 L
S
17.2265 107.2786 m
25.8801 107.2786 L
35.3177 107.2786 L
44.1797 107.2786 L
52.7057 107.2786 L
61.7786 107.2786 L
70.513 107.2786 L
79.7916 107.2786 L
88.7369 107.2786 L
97.3411 107.2786 L
106.4947 107.2786 L
115.3073 107.2786 L
123.7838 107.2786 L
132.8046 107.2786 L
141.4921 107.2786 L
150.7239 107.2786 L
159.6171 107.2786 L
168.1745 107.2786 L
177.2786 107.2786 L
186.0417 107.2786 L
195.3567 107.2786 L
204.3281 107.2786 L
212.9635 107.2786 L
222.1484 107.2786 L
230.5416 107.2786 L
S
18.4375 88.427 m
22.651 88.7864 L
27.0885 89.0651 L
29.4218 89.1719 L
31.5937 89.25 L
32.8437 89.2812 L
33.9791 89.3021 L
34.6067 89.3151 L
35.289 89.3229 L
35.6015 89.3255 L
35.9322 89.3281 L
36.2161 89.3307 L
36.5286 89.3307 L
36.8202 89.3333 L
37.0937 89.3333 L
37.3515 89.3333 L
37.6301 89.3333 L
37.901 89.3333 L
38.1562 89.3333 L
38.388 89.3307 L
38.638 89.3307 L
39.2109 89.3255 L
39.8176 89.3203 L
40.9036 89.3072 L
41.914 89.2864 L
42.8567 89.263 L
45.0026 89.1979 L
47.3437 89.1015 L
49.5624 88.9843 L
53.7161 88.7109 L
62.3047 87.9244 L
71.4375 86.8124 L
80.2317 85.5624 L
88.6874 84.2968 L
97.6926 83.0052 L
106.3567 81.9582 L
110.8463 81.539 L
113.1302 81.3619 L
115.5729 81.2031 L
117.8879 81.0833 L
119.9921 81.0026 L
121.0078 80.9765 L
121.5416 80.9634 L
122.1094 80.953 L
122.6041 80.9452 L
123.151 80.9348 L
123.6458 80.9296 L
123.8853 80.927 L
124.1094 80.927 L
124.388 80.9244 L
S
124.388 80.9244 m
124.5416 80.9244 L
124.6848 80.9244 L
124.9452 80.9244 L
125.2239 80.9244 L
125.3724 80.9244 L
125.5312 80.9244 L
125.6978 80.9244 L
125.8567 80.9244 L
126.1354 80.927 L
126.4375 80.9296 L
127.0339 80.9348 L
127.5989 80.9452 L
128.651 80.9634 L
129.6848 80.9895 L
130.6406 81.0182 L
132.802 81.1094 L
134.9635 81.2239 L
136.9921 81.3567 L
141.6093 81.7395 L
150.2864 82.7161 L
159.513 84.0026 L
168.401 85.3307 L
176.9478 86.5677 L
186.0443 87.7187 L
194.802 88.5807 L
199.5911 88.9244 L
201.7864 89.0469 L
204.1067 89.1562 L
206.25 89.2317 L
207.3802 89.2656 L
208.5989 89.2942 L
209.1719 89.3021 L
209.7161 89.3125 L
210.2448 89.3203 L
210.7369 89.3255 L
211.2005 89.3281 L
211.4375 89.3307 L
211.6926 89.3307 L
211.9478 89.3333 L
212.1875 89.3333 L
212.4713 89.3333 L
212.7343 89.3333 L
213.0208 89.3333 L
213.289 89.3333 L
213.5312 89.3307 L
213.7942 89.3307 L
214.0781 89.3281 L
214.3828 89.3281 L
214.927 89.3229 L
215.8983 89.3099 L
S
215.8983 89.3099 m
216.9687 89.289 L
218.1198 89.2604 L
219.3619 89.2239 L
221.6015 89.138 L
223.8697 89.0234 L
226.3411 88.8697 L
230.8411 88.513 L
231.7525 88.427 L
S
21.9895 70.8619 m
26.2031 71.5494 L
30.6432 72.0911 L
32.9739 72.2968 L
35.1484 72.4453 L
36.3958 72.5078 L
37.5312 72.5546 L
38.1588 72.5702 L
38.8411 72.5885 L
39.1536 72.5963 L
39.4843 72.5989 L
39.7681 72.6041 L
40.0781 72.6067 L
40.3724 72.6093 L
40.6458 72.6093 L
40.9036 72.6145 L
41.1797 72.6145 L
41.4531 72.6093 L
41.7083 72.6093 L
41.94 72.6067 L
42.1875 72.6041 L
42.7603 72.5989 L
43.3697 72.5885 L
44.4557 72.5572 L
45.4661 72.5208 L
46.4114 72.4765 L
48.5546 72.3489 L
50.8957 72.1614 L
53.1146 71.9374 L
57.2708 71.4062 L
65.8541 69.8853 L
74.9895 67.7395 L
83.7838 65.3255 L
92.2396 62.8801 L
101.2448 60.388 L
109.9088 58.3672 L
114.3984 57.5494 L
116.6822 57.2083 L
119.1224 56.901 L
121.4401 56.6744 L
123.5442 56.5208 L
124.5598 56.4635 L
125.0963 56.4375 L
125.6614 56.4192 L
126.1562 56.401 L
126.703 56.388 L
127.1979 56.375 L
127.4401 56.3724 L
127.6588 56.3697 L
127.94 56.3672 L
S
127.94 56.3672 m
128.0937 56.3645 L
128.2369 56.3645 L
128.4973 56.3645 L
128.776 56.3645 L
128.9218 56.3645 L
129.0833 56.3645 L
129.25 56.3672 L
129.4062 56.3672 L
129.6874 56.3697 L
129.9895 56.375 L
130.5859 56.388 L
131.1484 56.401 L
132.2031 56.4401 L
133.2395 56.4895 L
134.1927 56.5494 L
136.3567 56.7187 L
138.5182 56.9426 L
140.5442 57.1979 L
145.1614 57.94 L
153.8385 59.8254 L
163.0651 62.3099 L
171.9504 64.8775 L
180.4973 67.2656 L
189.5963 69.4895 L
198.3541 71.1536 L
203.1432 71.8202 L
205.3385 72.0599 L
207.6588 72.2656 L
209.7994 72.4166 L
210.9322 72.4791 L
212.151 72.5338 L
212.7265 72.5546 L
213.2682 72.5702 L
213.7968 72.5859 L
214.289 72.5937 L
214.7525 72.6015 L
214.9895 72.6041 L
215.2448 72.6067 L
215.5 72.6093 L
215.7395 72.6093 L
216.0234 72.6093 L
216.2864 72.6145 L
216.5702 72.6093 L
216.8411 72.6093 L
217.0833 72.6067 L
217.3463 72.6067 L
217.6327 72.6015 L
217.9348 72.5989 L
218.4791 72.5885 L
219.4479 72.5624 L
S
219.4479 72.5624 m
220.5182 72.526 L
221.6744 72.4713 L
222.914 72.3984 L
225.1536 72.2291 L
227.4192 72.0104 L
229.8905 71.7135 L
234.3932 71.0234 L
235.3047 70.8619 L
S
27.638 55.776 m
31.8515 56.7473 L
36.2942 57.5156 L
38.6249 57.8098 L
40.7968 58.0182 L
42.0443 58.1042 L
43.1797 58.1667 L
43.8072 58.1953 L
44.4895 58.2187 L
44.8046 58.2265 L
45.1354 58.2369 L
45.4218 58.2422 L
45.7317 58.2474 L
46.0234 58.25 L
46.2942 58.25 L
46.5546 58.2526 L
46.8306 58.2526 L
47.1015 58.25 L
47.3593 58.25 L
47.5885 58.2474 L
47.8385 58.2448 L
48.4114 58.2343 L
49.0182 58.2161 L
50.1042 58.1771 L
51.1146 58.1224 L
52.0599 58.0599 L
54.2031 57.8775 L
56.5442 57.6119 L
58.7629 57.2968 L
62.9192 56.5494 L
71.5052 54.3958 L
80.638 51.3619 L
89.4349 47.9478 L
97.8905 44.4869 L
106.8957 40.966 L
115.5598 38.1068 L
120.0469 36.9504 L
122.3333 36.4661 L
124.7734 36.0364 L
127.0885 35.7135 L
129.1979 35.4947 L
130.2109 35.4166 L
130.7473 35.3802 L
131.3125 35.3489 L
131.8072 35.3255 L
132.3515 35.3047 L
132.8463 35.2916 L
133.0911 35.2864 L
133.3099 35.2838 L
133.5911 35.2786 L
S
133.5911 35.2786 m
133.7447 35.2786 L
133.8879 35.2734 L
134.1458 35.2734 L
134.4244 35.2734 L
134.5729 35.2734 L
134.7317 35.2734 L
134.901 35.2786 L
135.0599 35.2786 L
135.3411 35.2838 L
135.6406 35.289 L
136.2369 35.3047 L
136.7994 35.3255 L
137.8541 35.3828 L
138.8879 35.4531 L
139.8437 35.5364 L
142.0052 35.776 L
144.1667 36.0937 L
146.1927 36.4557 L
150.8124 37.5025 L
159.4869 40.1692 L
168.7135 43.6822 L
177.6015 47.3151 L
186.1484 50.69 L
195.2448 53.8385 L
204.0026 56.1901 L
208.7916 57.1302 L
210.9869 57.4713 L
213.3073 57.7629 L
215.4505 57.9765 L
216.5859 58.0651 L
217.7994 58.138 L
218.375 58.1692 L
218.9192 58.1927 L
219.4479 58.2135 L
219.9374 58.2265 L
220.401 58.2396 L
220.6406 58.2422 L
220.8931 58.2448 L
221.151 58.2474 L
221.388 58.25 L
221.677 58.2526 L
221.9374 58.2526 L
222.2213 58.2526 L
222.4921 58.25 L
222.7343 58.2474 L
222.9947 58.2448 L
223.2838 58.2396 L
223.5833 58.2343 L
224.1276 58.2187 L
225.1015 58.1823 L
S
225.1015 58.1823 m
226.1693 58.1276 L
227.3229 58.0521 L
228.5624 57.9504 L
230.802 57.7135 L
233.0703 57.4036 L
235.5416 56.9817 L
240.0417 56.0052 L
240.953 55.776 L
S
35.0026 44.2005 m
39.2135 45.3932 L
43.6562 46.3307 L
45.9869 46.69 L
48.1588 46.9452 L
49.4088 47.0521 L
50.5442 47.1328 L
51.1719 47.164 L
51.8541 47.1927 L
52.1666 47.2031 L
52.5 47.2135 L
52.7838 47.2213 L
53.0937 47.2265 L
53.388 47.2291 L
53.6562 47.2317 L
53.9166 47.2343 L
54.1953 47.2343 L
54.4661 47.2317 L
54.7213 47.2291 L
54.9504 47.2265 L
55.2031 47.2239 L
55.776 47.2083 L
56.3828 47.1901 L
57.4687 47.138 L
58.4791 47.0755 L
59.4218 46.9973 L
61.5677 46.776 L
63.9088 46.4505 L
66.1276 46.0651 L
70.2812 45.1458 L
78.8671 42.5104 L
88 38.7942 L
96.7942 34.6145 L
105.2526 30.3776 L
114.2552 26.0599 L
122.9218 22.5598 L
127.4114 21.1458 L
129.6978 20.552 L
132.138 20.0234 L
134.4531 19.6275 L
136.5572 19.3619 L
137.5729 19.2656 L
138.1067 19.2213 L
138.6744 19.1849 L
139.1692 19.1562 L
139.7135 19.1302 L
140.2083 19.1146 L
140.4505 19.1042 L
140.6718 19.0989 L
140.9504 19.0963 L
S
140.9504 19.0963 m
141.1042 19.0937 L
141.25 19.0911 L
141.5104 19.0911 L
141.789 19.0911 L
141.9348 19.0911 L
142.0963 19.0937 L
142.263 19.0937 L
142.4218 19.0963 L
142.703 19.1015 L
143.0026 19.1094 L
143.5989 19.1302 L
144.164 19.1562 L
145.2161 19.2213 L
146.25 19.3099 L
147.2057 19.4088 L
149.3672 19.7057 L
151.5286 20.0911 L
153.5572 20.5364 L
158.1771 21.8176 L
166.8515 25.0859 L
176.0781 29.3906 L
184.966 33.8385 L
193.513 37.9739 L
202.6093 41.828 L
211.3645 44.7083 L
216.1562 45.8567 L
218.3515 46.276 L
220.6718 46.638 L
222.8124 46.8957 L
223.9452 47.0052 L
225.164 47.0989 L
225.7369 47.1328 L
226.2812 47.1614 L
226.8124 47.1823 L
227.3021 47.2031 L
227.7655 47.2135 L
228.0026 47.2213 L
228.2578 47.2265 L
228.513 47.2291 L
228.7525 47.2317 L
229.0365 47.2343 L
229.2994 47.2343 L
229.5859 47.2317 L
229.8541 47.2317 L
230.0989 47.2291 L
230.3593 47.2239 L
230.6432 47.2187 L
230.9478 47.2083 L
231.4921 47.1927 L
232.4635 47.1484 L
S
232.4635 47.1484 m
233.5338 47.0807 L
234.6848 46.9895 L
235.9244 46.8645 L
238.1666 46.5729 L
240.4322 46.1901 L
242.9062 45.6796 L
247.4036 44.4843 L
248.3177 44.2005 L
S
43.5781 36.9244 m
47.789 38.2552 L
52.2291 39.2994 L
54.5624 39.7005 L
56.7343 39.9843 L
57.9843 40.1068 L
59.1172 40.1927 L
59.7473 40.2291 L
60.4296 40.2604 L
60.7421 40.276 L
61.0729 40.2838 L
61.3567 40.2916 L
61.6666 40.2968 L
61.9608 40.302 L
62.2317 40.3073 L
62.4921 40.3073 L
62.7681 40.3073 L
63.0417 40.3073 L
63.2968 40.302 L
63.526 40.2994 L
63.776 40.2942 L
64.3489 40.2812 L
64.9582 40.2578 L
66.0443 40.2005 L
67.0547 40.1302 L
67.9973 40.0443 L
70.1432 39.7968 L
72.4843 39.4322 L
74.7005 39.0026 L
78.8567 37.9791 L
87.4401 35.0391 L
96.5755 30.8957 L
105.3698 26.2317 L
113.8254 21.5052 L
122.8307 16.69 L
131.4973 12.7864 L
135.9869 11.2109 L
138.2708 10.5494 L
140.7135 9.9608 L
143.0286 9.5182 L
145.1328 9.2187 L
146.1484 9.112 L
146.6822 9.0651 L
147.25 9.0234 L
147.7447 8.9921 L
148.289 8.9634 L
148.7838 8.9426 L
149.026 8.9348 L
149.2474 8.9296 L
149.526 8.9218 L
S
149.526 8.9218 m
149.6796 8.9192 L
149.8254 8.9192 L
150.0833 8.9166 L
150.3619 8.9166 L
150.5078 8.9166 L
150.6692 8.9192 L
150.8385 8.9218 L
150.9947 8.9218 L
151.276 8.9322 L
151.5781 8.9374 L
152.1719 8.9634 L
152.7343 8.9921 L
153.7916 9.0651 L
154.8254 9.1614 L
155.7812 9.276 L
157.9426 9.6041 L
160.1042 10.0364 L
162.1328 10.5312 L
166.7499 11.9608 L
175.427 15.6067 L
184.6536 20.4062 L
193.539 25.3645 L
202.0885 29.9791 L
211.1849 34.276 L
219.94 37.4895 L
224.7317 38.7734 L
226.927 39.2396 L
229.2474 39.6406 L
231.3854 39.9296 L
232.5208 40.0495 L
233.7395 40.1562 L
234.3125 40.1953 L
234.8567 40.2265 L
235.3854 40.2526 L
235.8775 40.2708 L
236.3411 40.2864 L
236.5781 40.2916 L
236.8333 40.2968 L
237.0885 40.302 L
237.3281 40.3073 L
237.6119 40.3073 L
237.8749 40.3073 L
238.1588 40.3073 L
238.4296 40.302 L
238.6692 40.2994 L
238.9348 40.2942 L
239.2187 40.289 L
239.5234 40.2812 L
240.0677 40.2604 L
241.0391 40.2109 L
S
241.0391 40.2109 m
242.1094 40.138 L
243.2604 40.0338 L
244.5 39.8931 L
246.7421 39.5702 L
249.0078 39.1458 L
251.4817 38.5729 L
255.9791 37.2396 L
256.8931 36.9244 L
S
1 Ap
0 O
1 g
0 G
0 J 0 j 1 w
258.8677 37.1577 m
278.1229 37.1577 293.7328 68.5867 293.7328 107.355 c
293.7328 146.1233 278.1229 177.5523 258.8677 177.5523 c
239.6126 177.5523 224.0028 146.1233 224.0028 107.355 c
224.0028 68.5867 239.6126 37.1577 258.8677 37.1577 c
b
0 Ap
43.5781 177.6354 m
32 177.5 17.4558 141.5 17.2265 107.2786 c
17 73.5 31 37 43.5781 36.9244 c
S
u
0 O
74.8046 22.43 m
59.7109 22.5208 42.911 66.3207 43.1828 106.8549 c
43.4579 147.9204 60.9109 191.1203 74.8046 191.2828 c
82.7037 191.3475 l
68.8101 191.185 51.357 147.9851 51.0819 106.9196 c
50.8101 66.3853 67.6101 22.5855 82.7037 22.4947 c
74.8046 22.43 l
Bb
1 (Black & White) 42.6795 106.8888 0 40.0772 1 0 0 1 0 0 Bg
12063.9999 0 0 -172.9174 -12021.3204 193.3475 Bc
40.0772 0 0 -172.9174 42.6795 193.3475 Bm
12063.9999 0 0 -172.9174 82.7567 193.3475 Bc
b
2 BB
75.6667 26 m
82 27.3333 85.0208 32.3958 86.7708 35.0625 c
94.5833 31.8333 l
92.8333 29.1667 89 22.5 82.4167 22.5 c
Bb
1 (Black & White) 75.5585 28.8417 0 19.7746 1 0 0 1 0 0 Bg
12064.0001 0 0 -16.5625 -11988.4416 37.0625 Bc
19.7746 0 0 -16.5625 75.5585 37.0625 Bm
12064.0001 0 0 -16.5625 95.333 37.0625 Bc
B
1 BB
77.3333 188.6667 m
82.2725 187.6789 84.1901 185.2708 87.4401 179.5208 c
93.4167 182.3333 l
90.1667 188.0833 87.7407 191.3475 82.7037 191.3475 c
Bb
1 (Black & White) 77.2291 185.3591 0 16.8879 1 0 0 1 0 0 Bg
12063.9999 0 0 -15.8267 -11986.7708 193.3475 Bc
16.8879 0 0 -15.8267 77.2291 193.3475 Bm
12063.9999 0 0 -15.8267 94.117 193.3475 Bc
B
1 BB
U
u
225.0574 20.8746 m
209.9638 20.9653 193.1638 64.7652 193.4357 105.2995 c
193.7108 146.365 211.1638 189.5649 225.0574 189.7274 c
232.9566 189.792 l
219.0629 189.6296 201.6099 146.4297 201.3348 105.3642 c
201.063 64.8299 217.8629 21.03 232.9566 20.9393 c
225.0574 20.8746 l
Bb
1 (Black & White) 42.6795 106.8888 0 40.0772 1 0 0 1 150.2528 1.5554 Bg
12063.9999 0 0 -172.9174 -11871.0675 191.792 Bc
40.0772 0 0 -172.9174 192.9324 191.792 Bm
12063.9999 0 0 -172.9174 233.0095 191.792 Bc
b
2 BB
225.9195 24.4446 m
232.2528 25.7779 239.3333 36.3333 240.0677 40.2604 c
249.0078 39.1458 l
247.2578 36.4791 239.2528 20.9446 232.6695 20.9446 c
Bb
1 (Black & White) 75.5585 28.8417 0 19.7746 1 0 0 1 150.2528 1.5554 Bg
12064.0001 0 0 -23.3158 -11838.1887 42.2604 Bc
19.7746 0 0 -23.3158 225.8113 42.2604 Bm
12064.0001 0 0 -23.3158 245.5859 42.2604 Bc
B
1 BB
226.3333 186 m
231.2725 185.0122 235.9687 180.0208 239.2187 174.2708 c
246.7421 174.9895 l
243.4921 180.7395 237.9935 189.792 232.9566 189.792 c
Bb
1 (Black & White) 77.2291 185.3591 0 16.8879 1 0 0 1 150.2528 1.5554 Bg
12063.9999 0 0 -19.5212 -11836.5179 191.792 Bc
16.8879 0 0 -19.5212 227.482 191.792 Bm
12063.9999 0 0 -19.5212 244.3699 191.792 Bc
B
1 BB
U
1 Ap
1 g
259.8677 51.1969 m
275.2719 51.1969 287.7599 76.3402 287.7599 107.355 c
287.7599 138.3697 275.2719 163.5131 259.8677 163.5131 c
244.4636 163.5131 231.9757 138.3697 231.9757 107.355 c
231.9757 76.3402 244.4636 51.1969 259.8677 51.1969 c
b
260.8678 71.4136 m
270.7265 71.4136 278.7189 87.5054 278.7189 107.355 c
278.7189 127.2046 270.7265 143.2964 260.8678 143.2964 c
251.009 143.2964 243.0167 127.2046 243.0167 107.355 c
243.0167 87.5054 251.009 71.4136 260.8678 71.4136 c
b
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
